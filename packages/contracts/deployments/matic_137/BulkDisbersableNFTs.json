{"metadata":"{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"src/BulkDisbersableNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.4;\\n\\n// From: https://wizard.openzeppelin.com/#erc1155\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\n/// @custom:security-contact dys@dhappy.org\\ncontract BulkDisbersableNFTs is Initializable, ERC1155Upgradeable, OwnableUpgradeable, ERC1155BurnableUpgradeable, ERC1155SupplyUpgradeable, UUPSUpgradeable {\\n  using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n  // Note that because the contract is proxied, the\\n  // storage members and order cannot change\\n  string public name;\\n  string public symbol;\\n\\n  mapping (uint256 => string) private uris;\\n  CountersUpgradeable.Counter private numTokenTypes;\\n\\n  // internal token gating tokens are the top eight bits \\n  uint256 public constant LOWER248 = 2**248 - 1;\\n\\n  enum Role {\\n    Superuser,\\n    Minter,\\n    RoleGiver,\\n    Transferer,\\n    DataSetter,\\n    Maintainer,\\n    Reserved2,\\n    Reserved1\\n  }\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() initializer {}\\n\\n  function initialize(string calldata _name, string calldata _symbol)\\n    initializer\\n    public\\n  {\\n    name = _name;\\n    symbol = _symbol;\\n\\n    __ERC1155_init(\\\"Error: Single Token URI Not Used\\\");\\n    __Ownable_init();\\n    __ERC1155Burnable_init();\\n    __ERC1155Supply_init();\\n    __UUPSUpgradeable_init();\\n  }\\n\\n  function _hasRole(Role role)\\n    internal\\n    view\\n    returns (bool has)\\n  {\\n    uint256 id = (uint(role) << 248) + LOWER248;\\n    return balanceOf(_msgSender(), id) > 0;\\n  }\\n\\n  function _isSuper()\\n    internal\\n    view\\n    returns (bool superuser)\\n  {\\n    return _hasRole(Role.Superuser) || _msgSender() == owner();\\n  }\\n\\n  function addSuperuser(address user)\\n    public\\n  {\\n    require(\\n      _isSuper(),\\n      \\\"You must be a superuser to create new ones.\\\"\\n    );\\n    uint256 tokenId = (uint(Role.Superuser) << 248) + LOWER248;\\n    mint(user, tokenId, 1, \\\"New Superuser\\\");\\n  }\\n\\n  function uri(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    return uris[tokenId];\\n  }\\n\\n  function setURI(string calldata newuri, uint256 tokenId)\\n    public\\n    virtual\\n  {\\n    require(\\n      _hasRole(Role.DataSetter) || _isSuper(),\\n      \\\"You must have a DataSetter token to change metadata.\\\"\\n    );\\n    uris[tokenId] = newuri;\\n    emit URI(newuri, tokenId);\\n  }\\n\\n  function mint(\\n    address recipient,\\n    uint256 amount,\\n    string calldata metadata,\\n    bytes memory data\\n  )\\n    public\\n    virtual\\n    returns (uint256 tokenId)\\n  {\\n    numTokenTypes.increment();\\n    uint256 id = numTokenTypes.current();\\n    mint(recipient, id, amount, data);\\n    setURI(metadata, id);\\n    return id;\\n  }\\n\\n  function mint(\\n    address recipient,\\n    uint256 id,\\n    uint256 amount,\\n    bytes memory data\\n  )\\n    public\\n    virtual\\n  {\\n    if((id & LOWER248) == LOWER248) { // token gate\\n      require(\\n        _hasRole(Role.RoleGiver) || _isSuper(),\\n        \\\"You must have a RoleGiver token to mint token gates.\\\"\\n      );\\n    } else {\\n      require(\\n        _hasRole(Role.Minter) || _isSuper(),\\n        \\\"You must have a Minter token to mint tokens.\\\"\\n      );\\n    }\\n    _mint(recipient, id, amount, data);\\n  }\\n\\n  function distributeSingles(\\n    address from,\\n    address[] memory to,\\n    uint256 id,\\n    bytes memory data\\n  )\\n    public\\n    virtual\\n  {\\n    require(\\n      from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n      \\\"ERC1155: caller is not owner nor approved\\\"\\n    );\\n    for (uint256 i = 0; i < to.length; ++i) {\\n      _safeTransferFrom(from, to[i], id, 1, data);\\n    }\\n  }\\n\\n  function tokenTypeCount()\\n    public\\n    view\\n    returns (uint256 numTypes)\\n  {\\n    return numTokenTypes.current();\\n  }\\n\\n  function _authorizeUpgrade(address)\\n    internal\\n    view\\n    override\\n  {\\n    require(\\n      _hasRole(Role.Maintainer) || _isSuper(),\\n      \\\"You must have a Maintainer token to upgrade the contract.\\\"\\n    );\\n  }\\n\\n  // The following functions are overrides required by Solidity.\\n  function _beforeTokenTransfer(\\n    address operator,\\n    address from,\\n    address to,\\n    uint256[] memory ids,\\n    uint256[] memory amounts,\\n    bytes memory data\\n  )\\n    internal\\n    override(ERC1155Upgradeable, ERC1155SupplyUpgradeable)\\n  {\\n    require(\\n      _hasRole(Role.Transferer) || _isSuper(),\\n      \\\"You must have a Transferer token to transfer tokens.\\\"\\n    );\\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n  }\\n}\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"}}}","address":"0xF11685BEF1184D902289f5d0B8B6738D69C06ac6","bytecode":"0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16620000365760005460ff161562000040565b62000040620000e5565b620000a85760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000cb576000805461ffff19166101011790555b8015620000de576000805461ff00191690555b5062000112565b6000620000fd306200010360201b620012cb1760201c565b15905090565b6001600160a01b03163b151590565b60805160601c6133936200014d600039600081816108c60152818161090601528181610c3d01528181610c7d0152610d1001526133936000f3fe6080604052600436106101b65760003560e01c80636b20c454116100ec578063bd85b0391161008a578063e985e9c511610064578063e985e9c5146104d5578063f242432a1461051e578063f2fde38b1461053e578063f5298aca1461055e57600080fd5b8063bd85b03914610468578063d2b04fd614610495578063d69f86cc146104b557600080fd5b8063731133e9116100c6578063731133e9146103eb5780638da5cb5b1461040b57806395d89b4114610433578063a22cb4651461044857600080fd5b80636b20c454146103a157806371185897146103c1578063715018a6146103d657600080fd5b80633659cfe6116101595780634f1ef286116101335780634f1ef2861461032a5780634f558e791461033d57806352d1902d1461036c57806367db3b8f1461038157600080fd5b80633659cfe6146102bd5780634cd88b76146102dd5780634e1273f4146102fd57600080fd5b80630e89341c116101955780630e89341c146102405780632eb2c2d61461026057806335f86fcd146102825780633656a1a41461029d57600080fd5b8062fdd58e146101bb57806301ffc9a7146101ee57806306fdde031461021e575b600080fd5b3480156101c757600080fd5b506101db6101d6366004612a41565b61057e565b6040519081526020015b60405180910390f35b3480156101fa57600080fd5b5061020e610209366004612bc2565b610617565b60405190151581526020016101e5565b34801561022a57600080fd5b50610233610669565b6040516101e59190612e4f565b34801561024c57600080fd5b5061023361025b366004612cab565b6106f8565b34801561026c57600080fd5b5061028061027b3660046127cb565b61079b565b005b34801561028e57600080fd5b506101db6001600160f81b0381565b3480156102a957600080fd5b506102806102b83660046128d2565b610832565b3480156102c957600080fd5b506102806102d836600461277f565b6108bb565b3480156102e957600080fd5b506102806102f8366004612bfa565b61099b565b34801561030957600080fd5b5061031d610318366004612b54565b610ad1565b6040516101e59190612de8565b6102806103383660046129f6565b610c32565b34801561034957600080fd5b5061020e610358366004612cab565b600090815260fb6020526040902054151590565b34801561037857600080fd5b506101db610d03565b34801561038d57600080fd5b5061028061039c366004612c62565b610db7565b3480156103ad57600080fd5b506102806103bc36600461294c565b610e92565b3480156103cd57600080fd5b506101db610eda565b3480156103e257600080fd5b50610280610eeb565b3480156103f757600080fd5b50610280610406366004612b02565b610f51565b34801561041757600080fd5b506097546040516001600160a01b0390911681526020016101e5565b34801561043f57600080fd5b50610233611073565b34801561045457600080fd5b506102806104633660046129bc565b611081565b34801561047457600080fd5b506101db610483366004612cab565b600090815260fb602052604090205490565b3480156104a157600080fd5b506101db6104b0366004612a6a565b61108c565b3480156104c157600080fd5b506102806104d036600461277f565b6110cc565b3480156104e157600080fd5b5061020e6104f0366004612799565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b34801561052a57600080fd5b50610280610539366004612870565b61117b565b34801561054a57600080fd5b5061028061055936600461277f565b6111c0565b34801561056a57600080fd5b50610280610579366004612ad0565b611288565b60006001600160a01b0383166105ef5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061064857506001600160e01b031982166303a24d0760e21b145b8061066357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6101918054610677906131b2565b80601f01602080910402602001604051908101604052809291908181526020018280546106a3906131b2565b80156106f05780601f106106c5576101008083540402835291602001916106f0565b820191906000526020600020905b8154815290600101906020018083116106d357829003601f168201915b505050505081565b600081815261019360205260409020805460609190610716906131b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610742906131b2565b801561078f5780601f106107645761010080835404028352916020019161078f565b820191906000526020600020905b81548152906001019060200180831161077257829003601f168201915b50505050509050919050565b6001600160a01b0385163314806107b757506107b785336104f0565b61081e5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016105e6565b61082b85858585856112da565b5050505050565b6001600160a01b03841633148061084e575061084e84336104f0565b61086a5760405162461bcd60e51b81526004016105e690612f3a565b60005b835181101561082b576108ab8585838151811061089a57634e487b7160e01b600052603260045260246000fd5b6020026020010151856001866114a3565b6108b481613219565b905061086d565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109045760405162461bcd60e51b81526004016105e690612eee565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661094d600080516020613317833981519152546001600160a01b031690565b6001600160a01b0316146109735760405162461bcd60e51b81526004016105e690612f83565b61097c816115d3565b604080516000808252602082019092526109989183919061165d565b50565b600054610100900460ff166109b65760005460ff16156109ba565b303b155b610a1d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105e6565b600054610100900460ff16158015610a3f576000805461ffff19166101011790555b610a4c61019186866124c0565b50610a5a61019284846124c0565b50610a996040518060400160405280602081526020017f4572726f723a2053696e676c6520546f6b656e20555249204e6f7420557365648152506117d7565b610aa1611807565b610aa9611836565b610ab1611836565b610ab9611836565b801561082b576000805461ff00191690555050505050565b60608151835114610b365760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105e6565b600083516001600160401b03811115610b5f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b88578160200160208202803683370190505b50905060005b8451811015610c2a57610bef858281518110610bba57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610be257634e487b7160e01b600052603260045260246000fd5b602002602001015161057e565b828281518110610c0f57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610c2381613219565b9050610b8e565b509392505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610c7b5760405162461bcd60e51b81526004016105e690612eee565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610cc4600080516020613317833981519152546001600160a01b031690565b6001600160a01b031614610cea5760405162461bcd60e51b81526004016105e690612f83565b610cf3826115d3565b610cff8282600161165d565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610da35760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105e6565b506000805160206133178339815191525b90565b610dc1600461185d565b80610dcf5750610dcf6118ab565b610e385760405162461bcd60e51b815260206004820152603460248201527f596f75206d75737420686176652061204461746153657474657220746f6b656e604482015273103a379031b430b733b29036b2ba30b230ba309760611b60648201526084016105e6565b600081815261019360205260409020610e529084846124c0565b50807f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b8484604051610e85929190612e20565b60405180910390a2505050565b6001600160a01b038316331480610eae5750610eae83336104f0565b610eca5760405162461bcd60e51b81526004016105e690612f3a565b610ed58383836118cf565b505050565b6000610ee66101945490565b905090565b6097546001600160a01b03163314610f455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105e6565b610f4f6000611a7c565b565b6001600160f81b038084161415610fe857610f6c600261185d565b80610f7a5750610f7a6118ab565b610fe35760405162461bcd60e51b815260206004820152603460248201527f596f75206d7573742068617665206120526f6c65476976657220746f6b656e206044820152733a379036b4b73a103a37b5b2b71033b0ba32b99760611b60648201526084016105e6565b611061565b610ff2600161185d565b8061100057506110006118ab565b6110615760405162461bcd60e51b815260206004820152602c60248201527f596f75206d75737420686176652061204d696e74657220746f6b656e20746f2060448201526b36b4b73a103a37b5b2b7399760a11b60648201526084016105e6565b61106d84848484611ace565b50505050565b6101928054610677906131b2565b610cff338383611bd1565b600061109d61019480546001019055565b60006110a96101945490565b90506110b787828886610f51565b6110c2858583610db7565b9695505050505050565b6110d46118ab565b6111345760405162461bcd60e51b815260206004820152602b60248201527f596f75206d75737420626520612073757065727573657220746f20637265617460448201526a32903732bb9037b732b99760a91b60648201526084016105e6565b60006111476001600160f81b0382613157565b9050610cff828260016040518060400160405280600d81526020016c2732bb9029bab832b93ab9b2b960991b815250610f51565b6001600160a01b038516331480611197575061119785336104f0565b6111b35760405162461bcd60e51b81526004016105e690612f3a565b61082b85858585856114a3565b6097546001600160a01b0316331461121a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105e6565b6001600160a01b03811661127f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e6565b61099881611a7c565b6001600160a01b0383163314806112a457506112a483336104f0565b6112c05760405162461bcd60e51b81526004016105e690612f3a565b610ed5838383611cb2565b6001600160a01b03163b151590565b81518351146112fb5760405162461bcd60e51b81526004016105e6906130ec565b6001600160a01b0384166113215760405162461bcd60e51b81526004016105e690612fcf565b33611330818787878787611db7565b60005b845181101561143557600085828151811061135e57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061138a57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156113db5760405162461bcd60e51b81526004016105e690613057565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061141a908490613157565b925050819055505050508061142e90613219565b9050611333565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611485929190612dfb565b60405180910390a461149b818787878787611e46565b505050505050565b6001600160a01b0384166114c95760405162461bcd60e51b81526004016105e690612fcf565b336114e88187876114d988611fb1565b6114e288611fb1565b87611db7565b60008481526065602090815260408083206001600160a01b038a1684529091529020548381101561152b5760405162461bcd60e51b81526004016105e690613057565b60008581526065602090815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061156a908490613157565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46115ca82888888888861200a565b50505050505050565b6115dd600561185d565b806115eb57506115eb6118ab565b6109985760405162461bcd60e51b815260206004820152603960248201527f596f75206d75737420686176652061204d61696e7461696e657220746f6b656e60448201527f20746f20757067726164652074686520636f6e74726163742e0000000000000060648201526084016105e6565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561169057610ed5836120d4565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116c957600080fd5b505afa9250505080156116f9575060408051601f3d908101601f191682019092526116f691810190612baa565b60015b61175c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105e6565b60008051602061331783398151915281146117cb5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105e6565b50610ed5838383612170565b600054610100900460ff166117fe5760405162461bcd60e51b81526004016105e6906130a1565b61099881612195565b600054610100900460ff1661182e5760405162461bcd60e51b81526004016105e6906130a1565b610f4f6121c5565b600054610100900460ff16610f4f5760405162461bcd60e51b81526004016105e6906130a1565b6000806001600160f81b0360f884600781111561188a57634e487b7160e01b600052602160045260246000fd5b61189592911b613157565b905060006118a3338361057e565b119392505050565b60006118b7600061185d565b80610ee65750506097546001600160a01b0316331490565b6001600160a01b0383166118f55760405162461bcd60e51b81526004016105e690613014565b80518251146119165760405162461bcd60e51b81526004016105e6906130ec565b600033905061193981856000868660405180602001604052806000815250611db7565b60005b8351811015611a1d57600084828151811061196757634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061199357634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038c1683529093529190912054909150818110156119e45760405162461bcd60e51b81526004016105e690612eaa565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580611a1581613219565b91505061193c565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611a6e929190612dfb565b60405180910390a450505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038416611b2e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016105e6565b33611b3f816000876114d988611fb1565b60008481526065602090815260408083206001600160a01b038916845290915281208054859290611b71908490613157565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461082b8160008787878761200a565b816001600160a01b0316836001600160a01b03161415611c455760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105e6565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038316611cd85760405162461bcd60e51b81526004016105e690613014565b33611d0781856000611ce987611fb1565b611cf287611fb1565b60405180602001604052806000815250611db7565b60008381526065602090815260408083206001600160a01b038816845290915290205482811015611d4a5760405162461bcd60e51b81526004016105e690612eaa565b60008481526065602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b611dc1600361185d565b80611dcf5750611dcf6118ab565b611e385760405162461bcd60e51b815260206004820152603460248201527f596f75206d75737420686176652061205472616e73666572657220746f6b656e604482015273103a37903a3930b739b332b9103a37b5b2b7399760611b60648201526084016105e6565b61149b8686868686866121f5565b6001600160a01b0384163b1561149b5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611e8a9089908990889088908890600401612d45565b602060405180830381600087803b158015611ea457600080fd5b505af1925050508015611ed4575060408051601f3d908101601f19168201909252611ed191810190612bde565b60015b611f8157611ee0613260565b806308c379a01415611f1a5750611ef5613277565b80611f005750611f1c565b8060405162461bcd60e51b81526004016105e69190612e4f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105e6565b6001600160e01b0319811663bc197c8160e01b146115ca5760405162461bcd60e51b81526004016105e690612e62565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611ff957634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b1561149b5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061204e9089908990889088908890600401612da3565b602060405180830381600087803b15801561206857600080fd5b505af1925050508015612098575060408051601f3d908101601f1916820190925261209591810190612bde565b60015b6120a457611ee0613260565b6001600160e01b0319811663f23a6e6160e01b146115ca5760405162461bcd60e51b81526004016105e690612e62565b6001600160a01b0381163b6121415760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105e6565b60008051602061331783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61217983612339565b6000825111806121865750805b15610ed55761106d8383612379565b600054610100900460ff166121bc5760405162461bcd60e51b81526004016105e6906130a1565b6109988161246d565b600054610100900460ff166121ec5760405162461bcd60e51b81526004016105e6906130a1565b610f4f33611a7c565b6001600160a01b0385166122985760005b83518110156122965782818151811061222f57634e487b7160e01b600052603260045260246000fd5b602002602001015160fb600086848151811061225b57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546122809190613157565b9091555061228f905081613219565b9050612206565b505b6001600160a01b03841661149b5760005b83518110156115ca578281815181106122d257634e487b7160e01b600052603260045260246000fd5b602002602001015160fb60008684815181106122fe57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000828254612323919061316f565b90915550612332905081613219565b90506122a9565b612342816120d4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6123e15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105e6565b600080846001600160a01b0316846040516123fc9190612d29565b600060405180830381855af49150503d8060008114612437576040519150601f19603f3d011682016040523d82523d6000602084013e61243c565b606091505b5091509150612464828260405180606001604052806027815260200161333760279139612480565b95945050505050565b8051610cff906067906020840190612544565b6060831561248f5750816124b9565b82511561249f5782518084602001fd5b8160405162461bcd60e51b81526004016105e69190612e4f565b9392505050565b8280546124cc906131b2565b90600052602060002090601f0160209004810192826124ee5760008555612534565b82601f106125075782800160ff19823516178555612534565b82800160010185558215612534579182015b82811115612534578235825591602001919060010190612519565b506125409291506125b8565b5090565b828054612550906131b2565b90600052602060002090601f0160209004810192826125725760008555612534565b82601f1061258b57805160ff1916838001178555612534565b82800160010185558215612534579182015b8281111561253457825182559160200191906001019061259d565b5b8082111561254057600081556001016125b9565b80356001600160a01b03811681146125e457600080fd5b919050565b600082601f8301126125f9578081fd5b8135602061260682613134565b60405161261382826131ed565b8381528281019150858301600585901b87018401881015612632578586fd5b855b8581101561265757612645826125cd565b84529284019290840190600101612634565b5090979650505050505050565b600082601f830112612674578081fd5b8135602061268182613134565b60405161268e82826131ed565b8381528281019150858301600585901b870184018810156126ad578586fd5b855b85811015612657578135845292840192908401906001016126af565b600082601f8301126126db578081fd5b81356001600160401b038111156126f4576126f461324a565b60405161270b601f8301601f1916602001826131ed565b81815284602083860101111561271f578283fd5b816020850160208301379081016020019190915292915050565b60008083601f84011261274a578182fd5b5081356001600160401b03811115612760578182fd5b60208301915083602082850101111561277857600080fd5b9250929050565b600060208284031215612790578081fd5b6124b9826125cd565b600080604083850312156127ab578081fd5b6127b4836125cd565b91506127c2602084016125cd565b90509250929050565b600080600080600060a086880312156127e2578081fd5b6127eb866125cd565b94506127f9602087016125cd565b935060408601356001600160401b0380821115612814578283fd5b61282089838a01612664565b94506060880135915080821115612835578283fd5b61284189838a01612664565b93506080880135915080821115612856578283fd5b50612863888289016126cb565b9150509295509295909350565b600080600080600060a08688031215612887578081fd5b612890866125cd565b945061289e602087016125cd565b9350604086013592506060860135915060808601356001600160401b038111156128c6578182fd5b612863888289016126cb565b600080600080608085870312156128e7578384fd5b6128f0856125cd565b935060208501356001600160401b038082111561290b578485fd5b612917888389016125e9565b9450604087013593506060870135915080821115612933578283fd5b50612940878288016126cb565b91505092959194509250565b600080600060608486031215612960578283fd5b612969846125cd565b925060208401356001600160401b0380821115612984578384fd5b61299087838801612664565b935060408601359150808211156129a5578283fd5b506129b286828701612664565b9150509250925092565b600080604083850312156129ce578182fd5b6129d7836125cd565b9150602083013580151581146129eb578182fd5b809150509250929050565b60008060408385031215612a08578081fd5b612a11836125cd565b915060208301356001600160401b03811115612a2b578182fd5b612a37858286016126cb565b9150509250929050565b60008060408385031215612a53578182fd5b612a5c836125cd565b946020939093013593505050565b600080600080600060808688031215612a81578283fd5b612a8a866125cd565b94506020860135935060408601356001600160401b0380821115612aac578485fd5b612ab889838a01612739565b90955093506060880135915080821115612856578283fd5b600080600060608486031215612ae4578081fd5b612aed846125cd565b95602085013595506040909401359392505050565b60008060008060808587031215612b17578182fd5b612b20856125cd565b9350602085013592506040850135915060608501356001600160401b03811115612b48578182fd5b612940878288016126cb565b60008060408385031215612b66578182fd5b82356001600160401b0380821115612b7c578384fd5b612b88868387016125e9565b93506020850135915080821115612b9d578283fd5b50612a3785828601612664565b600060208284031215612bbb578081fd5b5051919050565b600060208284031215612bd3578081fd5b81356124b981613300565b600060208284031215612bef578081fd5b81516124b981613300565b60008060008060408587031215612c0f578182fd5b84356001600160401b0380821115612c25578384fd5b612c3188838901612739565b90965094506020870135915080821115612c49578384fd5b50612c5687828801612739565b95989497509550505050565b600080600060408486031215612c76578081fd5b83356001600160401b03811115612c8b578182fd5b612c9786828701612739565b909790965060209590950135949350505050565b600060208284031215612cbc578081fd5b5035919050565b6000815180845260208085019450808401835b83811015612cf257815187529582019590820190600101612cd6565b509495945050505050565b60008151808452612d15816020860160208601613186565b601f01601f19169290920160200192915050565b60008251612d3b818460208701613186565b9190910192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090612d7190830186612cc3565b8281036060840152612d838186612cc3565b90508281036080840152612d978185612cfd565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ddd90830184612cfd565b979650505050505050565b6020815260006124b96020830184612cc3565b604081526000612e0e6040830185612cc3565b82810360208401526124648185612cc3565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020815260006124b96020830184612cfd565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60006001600160401b0382111561314d5761314d61324a565b5060051b60200190565b6000821982111561316a5761316a613234565b500190565b60008282101561318157613181613234565b500390565b60005b838110156131a1578181015183820152602001613189565b8381111561106d5750506000910152565b600181811c908216806131c657607f821691505b602082108114156131e757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b03811182821017156132125761321261324a565b6040525050565b600060001982141561322d5761322d613234565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115610db457600481823e5160e01c90565b600060443d10156132855790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156132b457505050505090565b82850191508151818111156132cc5750505050505090565b843d87010160208285010111156132e65750505050505090565b6132f5602082860101876131ed565b509095945050505050565b6001600160e01b03198116811461099857600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122056a8cbfaf939bf8bbd9c320d23fc3cb9ff184a56890d68dc2532b4494c9dcca264736f6c63430008040033","deployedBytecode":"0x6080604052600436106101b65760003560e01c80636b20c454116100ec578063bd85b0391161008a578063e985e9c511610064578063e985e9c5146104d5578063f242432a1461051e578063f2fde38b1461053e578063f5298aca1461055e57600080fd5b8063bd85b03914610468578063d2b04fd614610495578063d69f86cc146104b557600080fd5b8063731133e9116100c6578063731133e9146103eb5780638da5cb5b1461040b57806395d89b4114610433578063a22cb4651461044857600080fd5b80636b20c454146103a157806371185897146103c1578063715018a6146103d657600080fd5b80633659cfe6116101595780634f1ef286116101335780634f1ef2861461032a5780634f558e791461033d57806352d1902d1461036c57806367db3b8f1461038157600080fd5b80633659cfe6146102bd5780634cd88b76146102dd5780634e1273f4146102fd57600080fd5b80630e89341c116101955780630e89341c146102405780632eb2c2d61461026057806335f86fcd146102825780633656a1a41461029d57600080fd5b8062fdd58e146101bb57806301ffc9a7146101ee57806306fdde031461021e575b600080fd5b3480156101c757600080fd5b506101db6101d6366004612a41565b61057e565b6040519081526020015b60405180910390f35b3480156101fa57600080fd5b5061020e610209366004612bc2565b610617565b60405190151581526020016101e5565b34801561022a57600080fd5b50610233610669565b6040516101e59190612e4f565b34801561024c57600080fd5b5061023361025b366004612cab565b6106f8565b34801561026c57600080fd5b5061028061027b3660046127cb565b61079b565b005b34801561028e57600080fd5b506101db6001600160f81b0381565b3480156102a957600080fd5b506102806102b83660046128d2565b610832565b3480156102c957600080fd5b506102806102d836600461277f565b6108bb565b3480156102e957600080fd5b506102806102f8366004612bfa565b61099b565b34801561030957600080fd5b5061031d610318366004612b54565b610ad1565b6040516101e59190612de8565b6102806103383660046129f6565b610c32565b34801561034957600080fd5b5061020e610358366004612cab565b600090815260fb6020526040902054151590565b34801561037857600080fd5b506101db610d03565b34801561038d57600080fd5b5061028061039c366004612c62565b610db7565b3480156103ad57600080fd5b506102806103bc36600461294c565b610e92565b3480156103cd57600080fd5b506101db610eda565b3480156103e257600080fd5b50610280610eeb565b3480156103f757600080fd5b50610280610406366004612b02565b610f51565b34801561041757600080fd5b506097546040516001600160a01b0390911681526020016101e5565b34801561043f57600080fd5b50610233611073565b34801561045457600080fd5b506102806104633660046129bc565b611081565b34801561047457600080fd5b506101db610483366004612cab565b600090815260fb602052604090205490565b3480156104a157600080fd5b506101db6104b0366004612a6a565b61108c565b3480156104c157600080fd5b506102806104d036600461277f565b6110cc565b3480156104e157600080fd5b5061020e6104f0366004612799565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b34801561052a57600080fd5b50610280610539366004612870565b61117b565b34801561054a57600080fd5b5061028061055936600461277f565b6111c0565b34801561056a57600080fd5b50610280610579366004612ad0565b611288565b60006001600160a01b0383166105ef5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061064857506001600160e01b031982166303a24d0760e21b145b8061066357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6101918054610677906131b2565b80601f01602080910402602001604051908101604052809291908181526020018280546106a3906131b2565b80156106f05780601f106106c5576101008083540402835291602001916106f0565b820191906000526020600020905b8154815290600101906020018083116106d357829003601f168201915b505050505081565b600081815261019360205260409020805460609190610716906131b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610742906131b2565b801561078f5780601f106107645761010080835404028352916020019161078f565b820191906000526020600020905b81548152906001019060200180831161077257829003601f168201915b50505050509050919050565b6001600160a01b0385163314806107b757506107b785336104f0565b61081e5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016105e6565b61082b85858585856112da565b5050505050565b6001600160a01b03841633148061084e575061084e84336104f0565b61086a5760405162461bcd60e51b81526004016105e690612f3a565b60005b835181101561082b576108ab8585838151811061089a57634e487b7160e01b600052603260045260246000fd5b6020026020010151856001866114a3565b6108b481613219565b905061086d565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109045760405162461bcd60e51b81526004016105e690612eee565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661094d600080516020613317833981519152546001600160a01b031690565b6001600160a01b0316146109735760405162461bcd60e51b81526004016105e690612f83565b61097c816115d3565b604080516000808252602082019092526109989183919061165d565b50565b600054610100900460ff166109b65760005460ff16156109ba565b303b155b610a1d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105e6565b600054610100900460ff16158015610a3f576000805461ffff19166101011790555b610a4c61019186866124c0565b50610a5a61019284846124c0565b50610a996040518060400160405280602081526020017f4572726f723a2053696e676c6520546f6b656e20555249204e6f7420557365648152506117d7565b610aa1611807565b610aa9611836565b610ab1611836565b610ab9611836565b801561082b576000805461ff00191690555050505050565b60608151835114610b365760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105e6565b600083516001600160401b03811115610b5f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b88578160200160208202803683370190505b50905060005b8451811015610c2a57610bef858281518110610bba57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610be257634e487b7160e01b600052603260045260246000fd5b602002602001015161057e565b828281518110610c0f57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610c2381613219565b9050610b8e565b509392505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610c7b5760405162461bcd60e51b81526004016105e690612eee565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610cc4600080516020613317833981519152546001600160a01b031690565b6001600160a01b031614610cea5760405162461bcd60e51b81526004016105e690612f83565b610cf3826115d3565b610cff8282600161165d565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610da35760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105e6565b506000805160206133178339815191525b90565b610dc1600461185d565b80610dcf5750610dcf6118ab565b610e385760405162461bcd60e51b815260206004820152603460248201527f596f75206d75737420686176652061204461746153657474657220746f6b656e604482015273103a379031b430b733b29036b2ba30b230ba309760611b60648201526084016105e6565b600081815261019360205260409020610e529084846124c0565b50807f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b8484604051610e85929190612e20565b60405180910390a2505050565b6001600160a01b038316331480610eae5750610eae83336104f0565b610eca5760405162461bcd60e51b81526004016105e690612f3a565b610ed58383836118cf565b505050565b6000610ee66101945490565b905090565b6097546001600160a01b03163314610f455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105e6565b610f4f6000611a7c565b565b6001600160f81b038084161415610fe857610f6c600261185d565b80610f7a5750610f7a6118ab565b610fe35760405162461bcd60e51b815260206004820152603460248201527f596f75206d7573742068617665206120526f6c65476976657220746f6b656e206044820152733a379036b4b73a103a37b5b2b71033b0ba32b99760611b60648201526084016105e6565b611061565b610ff2600161185d565b8061100057506110006118ab565b6110615760405162461bcd60e51b815260206004820152602c60248201527f596f75206d75737420686176652061204d696e74657220746f6b656e20746f2060448201526b36b4b73a103a37b5b2b7399760a11b60648201526084016105e6565b61106d84848484611ace565b50505050565b6101928054610677906131b2565b610cff338383611bd1565b600061109d61019480546001019055565b60006110a96101945490565b90506110b787828886610f51565b6110c2858583610db7565b9695505050505050565b6110d46118ab565b6111345760405162461bcd60e51b815260206004820152602b60248201527f596f75206d75737420626520612073757065727573657220746f20637265617460448201526a32903732bb9037b732b99760a91b60648201526084016105e6565b60006111476001600160f81b0382613157565b9050610cff828260016040518060400160405280600d81526020016c2732bb9029bab832b93ab9b2b960991b815250610f51565b6001600160a01b038516331480611197575061119785336104f0565b6111b35760405162461bcd60e51b81526004016105e690612f3a565b61082b85858585856114a3565b6097546001600160a01b0316331461121a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105e6565b6001600160a01b03811661127f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e6565b61099881611a7c565b6001600160a01b0383163314806112a457506112a483336104f0565b6112c05760405162461bcd60e51b81526004016105e690612f3a565b610ed5838383611cb2565b6001600160a01b03163b151590565b81518351146112fb5760405162461bcd60e51b81526004016105e6906130ec565b6001600160a01b0384166113215760405162461bcd60e51b81526004016105e690612fcf565b33611330818787878787611db7565b60005b845181101561143557600085828151811061135e57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061138a57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156113db5760405162461bcd60e51b81526004016105e690613057565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061141a908490613157565b925050819055505050508061142e90613219565b9050611333565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611485929190612dfb565b60405180910390a461149b818787878787611e46565b505050505050565b6001600160a01b0384166114c95760405162461bcd60e51b81526004016105e690612fcf565b336114e88187876114d988611fb1565b6114e288611fb1565b87611db7565b60008481526065602090815260408083206001600160a01b038a1684529091529020548381101561152b5760405162461bcd60e51b81526004016105e690613057565b60008581526065602090815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061156a908490613157565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46115ca82888888888861200a565b50505050505050565b6115dd600561185d565b806115eb57506115eb6118ab565b6109985760405162461bcd60e51b815260206004820152603960248201527f596f75206d75737420686176652061204d61696e7461696e657220746f6b656e60448201527f20746f20757067726164652074686520636f6e74726163742e0000000000000060648201526084016105e6565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561169057610ed5836120d4565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116c957600080fd5b505afa9250505080156116f9575060408051601f3d908101601f191682019092526116f691810190612baa565b60015b61175c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105e6565b60008051602061331783398151915281146117cb5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105e6565b50610ed5838383612170565b600054610100900460ff166117fe5760405162461bcd60e51b81526004016105e6906130a1565b61099881612195565b600054610100900460ff1661182e5760405162461bcd60e51b81526004016105e6906130a1565b610f4f6121c5565b600054610100900460ff16610f4f5760405162461bcd60e51b81526004016105e6906130a1565b6000806001600160f81b0360f884600781111561188a57634e487b7160e01b600052602160045260246000fd5b61189592911b613157565b905060006118a3338361057e565b119392505050565b60006118b7600061185d565b80610ee65750506097546001600160a01b0316331490565b6001600160a01b0383166118f55760405162461bcd60e51b81526004016105e690613014565b80518251146119165760405162461bcd60e51b81526004016105e6906130ec565b600033905061193981856000868660405180602001604052806000815250611db7565b60005b8351811015611a1d57600084828151811061196757634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061199357634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038c1683529093529190912054909150818110156119e45760405162461bcd60e51b81526004016105e690612eaa565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580611a1581613219565b91505061193c565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611a6e929190612dfb565b60405180910390a450505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038416611b2e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016105e6565b33611b3f816000876114d988611fb1565b60008481526065602090815260408083206001600160a01b038916845290915281208054859290611b71908490613157565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461082b8160008787878761200a565b816001600160a01b0316836001600160a01b03161415611c455760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105e6565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038316611cd85760405162461bcd60e51b81526004016105e690613014565b33611d0781856000611ce987611fb1565b611cf287611fb1565b60405180602001604052806000815250611db7565b60008381526065602090815260408083206001600160a01b038816845290915290205482811015611d4a5760405162461bcd60e51b81526004016105e690612eaa565b60008481526065602090815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b611dc1600361185d565b80611dcf5750611dcf6118ab565b611e385760405162461bcd60e51b815260206004820152603460248201527f596f75206d75737420686176652061205472616e73666572657220746f6b656e604482015273103a37903a3930b739b332b9103a37b5b2b7399760611b60648201526084016105e6565b61149b8686868686866121f5565b6001600160a01b0384163b1561149b5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611e8a9089908990889088908890600401612d45565b602060405180830381600087803b158015611ea457600080fd5b505af1925050508015611ed4575060408051601f3d908101601f19168201909252611ed191810190612bde565b60015b611f8157611ee0613260565b806308c379a01415611f1a5750611ef5613277565b80611f005750611f1c565b8060405162461bcd60e51b81526004016105e69190612e4f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105e6565b6001600160e01b0319811663bc197c8160e01b146115ca5760405162461bcd60e51b81526004016105e690612e62565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611ff957634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b1561149b5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061204e9089908990889088908890600401612da3565b602060405180830381600087803b15801561206857600080fd5b505af1925050508015612098575060408051601f3d908101601f1916820190925261209591810190612bde565b60015b6120a457611ee0613260565b6001600160e01b0319811663f23a6e6160e01b146115ca5760405162461bcd60e51b81526004016105e690612e62565b6001600160a01b0381163b6121415760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105e6565b60008051602061331783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61217983612339565b6000825111806121865750805b15610ed55761106d8383612379565b600054610100900460ff166121bc5760405162461bcd60e51b81526004016105e6906130a1565b6109988161246d565b600054610100900460ff166121ec5760405162461bcd60e51b81526004016105e6906130a1565b610f4f33611a7c565b6001600160a01b0385166122985760005b83518110156122965782818151811061222f57634e487b7160e01b600052603260045260246000fd5b602002602001015160fb600086848151811061225b57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546122809190613157565b9091555061228f905081613219565b9050612206565b505b6001600160a01b03841661149b5760005b83518110156115ca578281815181106122d257634e487b7160e01b600052603260045260246000fd5b602002602001015160fb60008684815181106122fe57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000828254612323919061316f565b90915550612332905081613219565b90506122a9565b612342816120d4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6123e15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105e6565b600080846001600160a01b0316846040516123fc9190612d29565b600060405180830381855af49150503d8060008114612437576040519150601f19603f3d011682016040523d82523d6000602084013e61243c565b606091505b5091509150612464828260405180606001604052806027815260200161333760279139612480565b95945050505050565b8051610cff906067906020840190612544565b6060831561248f5750816124b9565b82511561249f5782518084602001fd5b8160405162461bcd60e51b81526004016105e69190612e4f565b9392505050565b8280546124cc906131b2565b90600052602060002090601f0160209004810192826124ee5760008555612534565b82601f106125075782800160ff19823516178555612534565b82800160010185558215612534579182015b82811115612534578235825591602001919060010190612519565b506125409291506125b8565b5090565b828054612550906131b2565b90600052602060002090601f0160209004810192826125725760008555612534565b82601f1061258b57805160ff1916838001178555612534565b82800160010185558215612534579182015b8281111561253457825182559160200191906001019061259d565b5b8082111561254057600081556001016125b9565b80356001600160a01b03811681146125e457600080fd5b919050565b600082601f8301126125f9578081fd5b8135602061260682613134565b60405161261382826131ed565b8381528281019150858301600585901b87018401881015612632578586fd5b855b8581101561265757612645826125cd565b84529284019290840190600101612634565b5090979650505050505050565b600082601f830112612674578081fd5b8135602061268182613134565b60405161268e82826131ed565b8381528281019150858301600585901b870184018810156126ad578586fd5b855b85811015612657578135845292840192908401906001016126af565b600082601f8301126126db578081fd5b81356001600160401b038111156126f4576126f461324a565b60405161270b601f8301601f1916602001826131ed565b81815284602083860101111561271f578283fd5b816020850160208301379081016020019190915292915050565b60008083601f84011261274a578182fd5b5081356001600160401b03811115612760578182fd5b60208301915083602082850101111561277857600080fd5b9250929050565b600060208284031215612790578081fd5b6124b9826125cd565b600080604083850312156127ab578081fd5b6127b4836125cd565b91506127c2602084016125cd565b90509250929050565b600080600080600060a086880312156127e2578081fd5b6127eb866125cd565b94506127f9602087016125cd565b935060408601356001600160401b0380821115612814578283fd5b61282089838a01612664565b94506060880135915080821115612835578283fd5b61284189838a01612664565b93506080880135915080821115612856578283fd5b50612863888289016126cb565b9150509295509295909350565b600080600080600060a08688031215612887578081fd5b612890866125cd565b945061289e602087016125cd565b9350604086013592506060860135915060808601356001600160401b038111156128c6578182fd5b612863888289016126cb565b600080600080608085870312156128e7578384fd5b6128f0856125cd565b935060208501356001600160401b038082111561290b578485fd5b612917888389016125e9565b9450604087013593506060870135915080821115612933578283fd5b50612940878288016126cb565b91505092959194509250565b600080600060608486031215612960578283fd5b612969846125cd565b925060208401356001600160401b0380821115612984578384fd5b61299087838801612664565b935060408601359150808211156129a5578283fd5b506129b286828701612664565b9150509250925092565b600080604083850312156129ce578182fd5b6129d7836125cd565b9150602083013580151581146129eb578182fd5b809150509250929050565b60008060408385031215612a08578081fd5b612a11836125cd565b915060208301356001600160401b03811115612a2b578182fd5b612a37858286016126cb565b9150509250929050565b60008060408385031215612a53578182fd5b612a5c836125cd565b946020939093013593505050565b600080600080600060808688031215612a81578283fd5b612a8a866125cd565b94506020860135935060408601356001600160401b0380821115612aac578485fd5b612ab889838a01612739565b90955093506060880135915080821115612856578283fd5b600080600060608486031215612ae4578081fd5b612aed846125cd565b95602085013595506040909401359392505050565b60008060008060808587031215612b17578182fd5b612b20856125cd565b9350602085013592506040850135915060608501356001600160401b03811115612b48578182fd5b612940878288016126cb565b60008060408385031215612b66578182fd5b82356001600160401b0380821115612b7c578384fd5b612b88868387016125e9565b93506020850135915080821115612b9d578283fd5b50612a3785828601612664565b600060208284031215612bbb578081fd5b5051919050565b600060208284031215612bd3578081fd5b81356124b981613300565b600060208284031215612bef578081fd5b81516124b981613300565b60008060008060408587031215612c0f578182fd5b84356001600160401b0380821115612c25578384fd5b612c3188838901612739565b90965094506020870135915080821115612c49578384fd5b50612c5687828801612739565b95989497509550505050565b600080600060408486031215612c76578081fd5b83356001600160401b03811115612c8b578182fd5b612c9786828701612739565b909790965060209590950135949350505050565b600060208284031215612cbc578081fd5b5035919050565b6000815180845260208085019450808401835b83811015612cf257815187529582019590820190600101612cd6565b509495945050505050565b60008151808452612d15816020860160208601613186565b601f01601f19169290920160200192915050565b60008251612d3b818460208701613186565b9190910192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090612d7190830186612cc3565b8281036060840152612d838186612cc3565b90508281036080840152612d978185612cfd565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612ddd90830184612cfd565b979650505050505050565b6020815260006124b96020830184612cc3565b604081526000612e0e6040830185612cc3565b82810360208401526124648185612cc3565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020815260006124b96020830184612cfd565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60006001600160401b0382111561314d5761314d61324a565b5060051b60200190565b6000821982111561316a5761316a613234565b500190565b60008282101561318157613181613234565b500390565b60005b838110156131a1578181015183820152602001613189565b8381111561106d5750506000910152565b600181811c908216806131c657607f821691505b602082108114156131e757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b03811182821017156132125761321261324a565b6040525050565b600060001982141561322d5761322d613234565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115610db457600481823e5160e01c90565b600060443d10156132855790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156132b457505050505090565b82850191508151818111156132cc5750505050505090565b843d87010160208285010111156132e65750505050505090565b6132f5602082860101876131ed565b509095945050505050565b6001600160e01b03198116811461099857600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122056a8cbfaf939bf8bbd9c320d23fc3cb9ff184a56890d68dc2532b4494c9dcca264736f6c63430008040033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"inputs":[],"name":"LOWER248","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"addSuperuser","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"burnBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address[]","name":"to","type":"address[]"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"distributeSingles","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"exists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"string","name":"metadata","type":"string"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"mint","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"newuri","type":"string"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"setURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenTypeCount","outputs":[{"internalType":"uint256","name":"numTypes","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]}